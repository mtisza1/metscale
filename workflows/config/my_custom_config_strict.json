{
   "read_filtering" : {
        "read_patterns" : {
            "pre_trimming_pattern"  : "{sample}_{direction}_reads",
            "pre_trimming_glob_pattern"  : "*_1_reads.fq.gz",
            "reverse_pe_pattern_search"  : "1_",
            "reverse_pe_pattern_replace" : "2_"
        },
        "quality_trimming" : {
            "sample_file_ext" : ".fq.gz"
        }
    },
    "workflows" : {
        "samples_input_workflow" : {
            "samples"    : ["Sample_1","Sample_2","Sample_3"]
        },
        "read_filtering_pretrim_workflow" : {
        },
        "read_filtering_posttrim_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_multiqc_workflow" : {
        },
        "read_filtering_khmer_interleave_reads_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_khmer_subsample_interleaved_reads_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_khmer_split_interleaved_reads_workflow" : {
            "qual"   : ["2","30"]
        },
        "read_filtering_khmer_count_unique_kmers_workflow" : {
            "qual"   : ["2","30"],
            "kmers" : [21,31,51]
        },
       "read_filtering_convert_PE_to_SE_workflow" : {
            "qual"   : ["25"]
        },
        "low_complexity_workflow":{
           "qual"       : ["2", "30"]
        },
        "assembly_metaspades_workflow" : {
            "comment": "# the assembly workflow will run metaspades assembler only",
            "qual"      : ["2","30"]
        },
        "assembly_spades_workflow" : {
            "comment" :"the assembly workflow will run spades assembler only",
            "qual"      : ["2","30"]
        },
        "assembly_rnaspades_workflow" : {
            "comment": "the assembly workflow will be run on. (rnaspades assembler only).",
            "qual"      : ["2","30"]
        },
        "assembly_plasmidspades_workflow" : {
            "comment":"the assembly workflow will run plasmidspades assembler only",
            "qual"      : ["2","30"]
        },
        "assembly_megahit_workflow" : {
            "comment": "# the assembly workflow will run megahit assembler only",
            "qual"      : ["2","30"]
        },
        "assembly_all_workflow" : {
            "comment":" the assembly workflow will run all metagenome assemblers (megahit and metaspades)",
            "qual"      : ["2","30"]
        },
        "assembly_quast_workflow" : {
            "assembler" : ["megahit","metaspades"],
            "qual"      : ["2","30"]
        },
        "assembly_metaquast_workflow" : {
            "assembler" : ["megahit","metaspades"],
            "qual"      : ["2","30"]
        },
        "assembly_quast_spades_workflow" : {
            "qual"      : ["2","30"]
        },
        "assembly_quast_plasmidspades_workflow" : {
            "qual"      : ["2","30"]
        },
        "assembly_multiqc_workflow" : {
            "comment":"which metagenome assembler to get input from",
            "multiqc_assembler" :  ["megahit","metaspades"]
        },
        "assembly_metaquast_rnaspades_workflow" : {
            "qual"      : ["2","30"]
        },
        "assembly_multiqc_rnaspades_workflow" : {
            "qual"      : ["2","30"]
        },
        "comparison_reads_workflow": {
            "comment":"these parameters determine which reads the comparison workflow will be run on",
            "kvalue"    : ["21","31","51"]
        },
        "comparison_assembly_workflow" : {
            "comment": "these parameters determine which assembled contigs the comparison workflow will be run on",
            "kvalue"    : ["21","31","51"]
        },
        "comparison_reads_assembly_workflow" : {
            "comment":"these parameters determine which reads and assembled contigs the comparison workflow will be run on",
            "kvalue"    : ["21","31","51"]
        },
        "tax_class_mtsv_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_signatures_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_gather_workflow" : {
            "qual" : ["2","30"],
            "kvalues" : ["21","31","51"]
        },
        "tax_class_kaijureport_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_kaijureport_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_kaijureport_filtered_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_kaijureport_filteredclass_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_kaijureport_filteredclass_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_kaijureport_filtered_contigs_workflow": {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_add_taxonnames_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_add_taxonnames_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_convert_kaiju_to_krona_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_kaiju_species_summary_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_kaiju_species_summary_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_visualize_krona_kaijureport_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_visualize_krona_kaijureport_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_visualize_krona_kaijureport_filtered_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_visualize_krona_kaijureport_filtered_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_visualize_krona_kaijureport_filteredclass_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_visualize_krona_kaijureport_filteredclass_contigs_workflow": {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
            },
        "tax_class_visualize_krona_species_summary_workflow" : {
            "qual" : ["2","30"]
        },
        "tax_class_visualize_krona_species_summary_contigs_workflow" : {
            "qual" : ["2","30"],
            "assembler" : ["megahit","metaspades"]
        },
        "tax_class_kraken2_workflow" : {
            "qual" : ["2","30"],
            "comment_db":"DB to use, this is the default DB downloaded from download python script",
            "db" : "minikraken2_v2_8GB_201904_UPDATE",
            "comment_confidence":"confidence score between 0 and 1",
            "confidence" : 0
        },
        "tax_class_krakenuniq_workflow" : {
            "qual" : ["2","30"],
            "comment_db":"DB to use, this is the default DB downloaded from download python script",
            "db" : "minikraken_20171019_8GB",
            "comment_hll":"hll-precision score between 10 and 18",
            "hll_precision" : 12
        },
        "tax_class_bracken_workflow" : {
            "read_length" : 100,
            "level" : "S",
            "threshold" : 0,
            "comment":"directory that has DBs",
            "bdb" : "minikraken2_v2_8GB_201904_UPDATE"
        },
        "tax_class_mash_dist_workflow" : {
            "qual" : ["2","30"],
            "mash_db" : "RefSeq_10K_Sketches.msh"
        },
        "tax_class_mash_screen_workflow" : {
            "qual" : ["2","30"],
            "mash_db" : "RefSeq_10K_Sketches.msh"
        },
        "functional_prokka_with_megahit_workflow" : {
            "comment":"these parameters determine which contig params from megahit to run prokka on",
            "qual"      : ["2","30"]
        },
        "functional_humann3_workflow" : {
            "qual" : ["2","30"]
        },
        "functional_prokka_with_metaspades_workflow" : {
            "comment":"these parameters determine which contig params from metaspades to run prokka on",
            "qual"      : ["2","30"]
        },
        "functional_prokka_metatrans_with_rnaspades_workflow" : {
            "qual"      : ["2","30"]
        },
        "functional_prokka_trans_with_rnaspades_workflow" : {
            "qual"      : ["2","30"]
        },
        "functional_prokka_with_spades_workflow" : {
            "comment":"these parameters determine which contig params from spades to run prokka on",
            "qual"      : ["2","30"]
        },
        "functional_abricate_with_megahit_workflow" : {
            "comment":"these parameters determine which contig params from megahit to run abricate on",
            "qual"      : ["2","30"],
            "comment_abricate":"abricate internal DBs - card, vfdb, argannot, resfinder, ncbibetalactamase, plasmidfinder replace customDBabricate with custom/external DB name",
            "db"        : ["card", "vfdb"],
            "db_backup"        : ["customDBabricate"]
        },
        "functional_abricate_with_metaspades_workflow" : {
            "comment":"these parameters determine which contig params from metaspades to run abricate on",
            "qual"      : ["2","30"],
            "comment_db_options":"abricate internal DBs - card, vfdb, argannot, resfinder, ncbibetalactamase, plasmidfinder replace customDBabricate with custom/external DB name",
            "db"        : ["card", "vfdb"],
            "db_backup"        : ["customDBabricate"]
        },
        "functional_abricate_with_spades_workflow" : {
            "comment":"these parameters determine which contig params from spades to run abricate on",
            "qual"      : ["2","30"],
            "comment_abricate":"abricate internal DBs - card, vfdb, argannot, resfinder, ncbibetalactamase, plasmidfinder replace customDBabricate with custom/external DB name",
            "db"        : ["card", "vfdb"],
            "db_backup"        : ["customDBabricate"]
        },
        "functional_with_srst2_workflow" : {
            "comment":"these paramters determine srst2 input",
            "qual"      : ["2","30"],
            "comment_db":"srst2 DBs - {ARGannot.r3.fasta, ResFinder.fasta, PlasmidFinder.fasta, EcOH.fasta} or external DBs",
            "db"        : ["ARGannot.r3.fasta", "ResFinder.fasta"]
        }
    }
}


